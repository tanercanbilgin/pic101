CCS PCM C Compiler, Version 5.112, 5967               14-Kas-23 14:42

               Filename:   C:\Users\Administrator\Desktop\notes\3_Sinif\1_Donem\Mikroislemciler\lab\lab 5\ccs\ikisegment\ikisegment.lst

               ROM used:   181 words (2%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           13 (4%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   042
0003:  NOP
.................... #include <16f877.h>
.................... //////////// Standard Header file for the PIC16F877 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  3F
0009:  RETLW  06
000A:  RETLW  5B
000B:  RETLW  4F
000C:  RETLW  66
000D:  RETLW  6D
000E:  RETLW  7C
000F:  RETLW  07
0010:  RETLW  7F
0011:  RETLW  6F
0012:  RETLW  77
0013:  RETLW  7C
0014:  RETLW  39
0015:  RETLW  5E
0016:  RETLW  79
0017:  RETLW  71
*
002D:  MOVF   26,W
002E:  CLRF   78
002F:  SUBWF  25,W
0030:  BTFSC  03.0
0031:  GOTO   035
0032:  MOVF   25,W
0033:  MOVWF  77
0034:  GOTO   041
0035:  CLRF   77
0036:  MOVLW  08
0037:  MOVWF  27
0038:  RLF    25,F
0039:  RLF    77,F
003A:  MOVF   26,W
003B:  SUBWF  77,W
003C:  BTFSC  03.0
003D:  MOVWF  77
003E:  RLF    78,F
003F:  DECFSZ 27,F
0040:  GOTO   038
0041:  RETURN
.................... 
.................... #list
.................... 
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD
.................... #use delay(clock = 4000000)
*
0018:  MOVLW  26
0019:  MOVWF  04
001A:  BCF    03.7
001B:  MOVF   00,W
001C:  BTFSC  03.2
001D:  GOTO   02C
001E:  MOVLW  01
001F:  MOVWF  78
0020:  CLRF   77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  DECFSZ 78,F
0024:  GOTO   020
0025:  MOVLW  4A
0026:  MOVWF  77
0027:  DECFSZ 77,F
0028:  GOTO   027
0029:  GOTO   02A
002A:  DECFSZ 00,F
002B:  GOTO   01E
002C:  RETURN
.................... #use fast_io(a)
.................... #use fast_io(b)
.................... int sayi = 0;
.................... int frame = 0;
.................... int birler = 0;
.................... int onlar = 0;
.................... const int digit[16] = {0x3f, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7C, 0x07, 0x7F,
....................                        0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
.................... void main()
*
0042:  MOVF   03,W
0043:  ANDLW  1F
0044:  MOVWF  03
0045:  CLRF   20
0046:  CLRF   21
0047:  CLRF   22
0048:  CLRF   23
0049:  MOVLW  FF
004A:  MOVWF  24
004B:  BSF    03.5
004C:  BSF    1F.0
004D:  BSF    1F.1
004E:  BSF    1F.2
004F:  BCF    1F.3
0050:  BCF    03.7
.................... {
....................     setup_psp(PSP_DISABLED);          // PSP devre disi
0051:  BCF    09.4
....................     setup_spi(SPI_SS_DISABLED);       // SPI devre disi
0052:  BCF    03.5
0053:  BCF    14.5
0054:  BCF    24.5
0055:  MOVF   24,W
0056:  BSF    03.5
0057:  MOVWF  07
0058:  BCF    03.5
0059:  BSF    24.4
005A:  MOVF   24,W
005B:  BSF    03.5
005C:  MOVWF  07
005D:  BCF    03.5
005E:  BCF    24.3
005F:  MOVF   24,W
0060:  BSF    03.5
0061:  MOVWF  07
0062:  MOVLW  01
0063:  BCF    03.5
0064:  MOVWF  14
0065:  MOVLW  00
0066:  BSF    03.5
0067:  MOVWF  14
....................     setup_timer_1(T1_DISABLED);       // T1 devre disi
0068:  BCF    03.5
0069:  CLRF   10
....................     setup_timer_2(T2_DISABLED, 0, 1); // T2 devre disi
006A:  MOVWF  78
006B:  MOVWF  12
006C:  MOVLW  00
006D:  BSF    03.5
006E:  MOVWF  12
....................     setup_adc_ports(NO_ANALOGS);      // analog giris yok
006F:  BSF    1F.0
0070:  BSF    1F.1
0071:  BSF    1F.2
0072:  BCF    1F.3
....................     setup_adc(ADC_OFF);               // ADC kapali
0073:  BCF    03.5
0074:  BCF    1F.0
....................     setup_CCP1(CCP_OFF);              // CCP1 devre disi
0075:  MOVLW  F0
0076:  ANDWF  17,F
....................     setup_CCP2(CCP_OFF);              // CCP2 devredisi
0077:  ANDWF  1D,F
.................... 
....................     set_tris_a(0x00); // A portu bütün pinler cikis
0078:  MOVLW  00
0079:  BSF    03.5
007A:  MOVWF  05
....................     set_tris_b(0x00); // B portu bütün pinler cikis
007B:  MOVWF  06
....................     output_b(0x00);   // baslangicta 1. led yanik
007C:  BCF    03.5
007D:  CLRF   06
....................     output_a(0x00);
007E:  CLRF   05
.................... 
....................     sayi = 0;
007F:  CLRF   20
....................     frame = 0;
0080:  CLRF   21
....................     delay_ms(1000);
0081:  MOVLW  04
0082:  MOVWF  25
0083:  MOVLW  FA
0084:  MOVWF  26
0085:  CALL   018
0086:  DECFSZ 25,F
0087:  GOTO   083
.................... 
....................     while (1)
....................     {
....................         birler = sayi % 10;
0088:  MOVF   20,W
0089:  MOVWF  25
008A:  MOVLW  0A
008B:  MOVWF  26
008C:  CALL   02D
008D:  MOVF   77,W
008E:  MOVWF  22
....................         onlar = sayi / 10;
008F:  MOVF   20,W
0090:  MOVWF  25
0091:  MOVLW  0A
0092:  MOVWF  26
0093:  CALL   02D
0094:  MOVF   78,W
0095:  MOVWF  23
.................... 
....................         output_b(digit[birler]); // RB0 pin çikisi lojik-1
0096:  MOVF   22,W
0097:  CALL   004
0098:  MOVWF  25
0099:  MOVWF  06
....................         output_high(pin_a1);
009A:  BSF    05.1
....................         delay_ms(5);
009B:  MOVLW  05
009C:  MOVWF  26
009D:  CALL   018
....................         output_low(pin_a1); // 500 ms gecikme
009E:  BCF    05.1
.................... 
....................         output_b(digit[onlar]); // RB0 pin çikisi lojik-1
009F:  MOVF   23,W
00A0:  CALL   004
00A1:  MOVWF  25
00A2:  MOVWF  06
....................         output_high(pin_a0);
00A3:  BSF    05.0
....................         delay_ms(5);        // 500 ms gecikme
00A4:  MOVLW  05
00A5:  MOVWF  26
00A6:  CALL   018
....................         output_low(pin_a0); // 500 ms gecikme
00A7:  BCF    05.0
.................... 
....................         frame++;
00A8:  INCF   21,F
....................         if (frame == 100)
00A9:  MOVF   21,W
00AA:  SUBLW  64
00AB:  BTFSS  03.2
00AC:  GOTO   0B3
....................         {
....................             frame = 0;
00AD:  CLRF   21
....................             sayi++;
00AE:  INCF   20,F
....................             if (sayi == 100)
00AF:  MOVF   20,W
00B0:  SUBLW  64
00B1:  BTFSC  03.2
....................                 sayi = 0;
00B2:  CLRF   20
....................         }
00B3:  GOTO   088
....................     }
.................... }
00B4:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
