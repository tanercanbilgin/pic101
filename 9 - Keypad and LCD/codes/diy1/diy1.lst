CCS PCM C Compiler, Version 5.112, 5967               25-Ara-23 23:33

               Filename:   C:\Users\Administrator\Desktop\notes\3_Sinif\1_Donem\Mikroislemciler\lab\lab 9\ccs\diy1\diy1.lst

               ROM used:   593 words (7%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           25 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1B2
0003:  NOP
.................... #include <16f877.h>
.................... //////////// Standard Header file for the PIC16F877 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877
0004:  DATA D3,30
0005:  DATA F9,34
0006:  DATA 3A,00
0007:  DATA D3,30
0008:  DATA F9,34
0009:  DATA 3A,00
000A:  DATA D3,30
000B:  DATA F9,34
000C:  DATA 3A,00
*
00F0:  MOVF   0B,W
00F1:  MOVWF  24
00F2:  BCF    0B.7
00F3:  BSF    03.5
00F4:  BSF    03.6
00F5:  BSF    0C.7
00F6:  BSF    0C.0
00F7:  NOP
00F8:  NOP
00F9:  BCF    03.5
00FA:  BCF    03.6
00FB:  BTFSC  24.7
00FC:  BSF    0B.7
00FD:  BSF    03.6
00FE:  MOVF   0C,W
00FF:  ANDLW  7F
0100:  BTFSC  03.2
0101:  GOTO   144
0102:  BCF    03.6
0103:  MOVWF  24
0104:  BSF    03.6
0105:  MOVF   0D,W
0106:  BCF    03.6
0107:  MOVWF  25
0108:  BSF    03.6
0109:  MOVF   0F,W
010A:  BCF    03.6
010B:  MOVWF  26
010C:  MOVF   24,W
010D:  MOVWF  2A
010E:  CALL   0C4
010F:  MOVF   25,W
0110:  BSF    03.6
0111:  MOVWF  0D
0112:  BCF    03.6
0113:  MOVF   26,W
0114:  BSF    03.6
0115:  MOVWF  0F
0116:  BCF    03.6
0117:  MOVF   0B,W
0118:  MOVWF  27
0119:  BCF    0B.7
011A:  BSF    03.5
011B:  BSF    03.6
011C:  BSF    0C.7
011D:  BSF    0C.0
011E:  NOP
011F:  NOP
0120:  BCF    03.5
0121:  BCF    03.6
0122:  BTFSC  27.7
0123:  BSF    0B.7
0124:  BSF    03.6
0125:  RLF    0C,W
0126:  RLF    0E,W
0127:  ANDLW  7F
0128:  BTFSC  03.2
0129:  GOTO   144
012A:  BCF    03.6
012B:  MOVWF  24
012C:  BSF    03.6
012D:  MOVF   0D,W
012E:  BCF    03.6
012F:  MOVWF  25
0130:  BSF    03.6
0131:  MOVF   0F,W
0132:  BCF    03.6
0133:  MOVWF  26
0134:  MOVF   24,W
0135:  MOVWF  2A
0136:  CALL   0C4
0137:  MOVF   25,W
0138:  BSF    03.6
0139:  MOVWF  0D
013A:  BCF    03.6
013B:  MOVF   26,W
013C:  BSF    03.6
013D:  MOVWF  0F
013E:  INCF   0D,F
013F:  BTFSC  03.2
0140:  INCF   0F,F
0141:  BCF    03.6
0142:  GOTO   0F0
0143:  BSF    03.6
0144:  BCF    03.6
0145:  RETURN
0146:  MOVF   2B,W
0147:  CLRF   78
0148:  SUBWF  2A,W
0149:  BTFSC  03.0
014A:  GOTO   14E
014B:  MOVF   2A,W
014C:  MOVWF  77
014D:  GOTO   15A
014E:  CLRF   77
014F:  MOVLW  08
0150:  MOVWF  2C
0151:  RLF    2A,F
0152:  RLF    77,F
0153:  MOVF   2B,W
0154:  SUBWF  77,W
0155:  BTFSC  03.0
0156:  MOVWF  77
0157:  RLF    78,F
0158:  DECFSZ 2C,F
0159:  GOTO   151
015A:  RETURN
015B:  MOVLW  20
015C:  BTFSS  25.4
015D:  MOVLW  30
015E:  MOVWF  26
015F:  MOVF   24,W
0160:  MOVWF  77
0161:  BTFSS  24.7
0162:  GOTO   16B
0163:  COMF   77,F
0164:  INCF   77,F
0165:  MOVF   77,W
0166:  MOVWF  24
0167:  MOVLW  2D
0168:  MOVWF  26
0169:  BSF    25.7
016A:  BSF    25.0
016B:  MOVF   24,W
016C:  MOVWF  2A
016D:  MOVLW  64
016E:  MOVWF  2B
016F:  CALL   146
0170:  MOVF   77,W
0171:  MOVWF  24
0172:  MOVLW  30
0173:  ADDWF  78,W
0174:  MOVWF  27
0175:  MOVF   24,W
0176:  MOVWF  2A
0177:  MOVLW  0A
0178:  MOVWF  2B
0179:  CALL   146
017A:  MOVLW  30
017B:  ADDWF  77,W
017C:  MOVWF  29
017D:  MOVLW  30
017E:  ADDWF  78,W
017F:  MOVWF  28
0180:  MOVF   26,W
0181:  MOVWF  77
0182:  MOVLW  30
0183:  SUBWF  27,W
0184:  BTFSC  03.2
0185:  GOTO   18A
0186:  BSF    25.1
0187:  BTFSC  25.7
0188:  BSF    25.2
0189:  GOTO   19E
018A:  MOVF   26,W
018B:  MOVWF  27
018C:  MOVLW  20
018D:  MOVWF  26
018E:  MOVLW  30
018F:  SUBWF  28,W
0190:  BTFSC  03.2
0191:  GOTO   196
0192:  BSF    25.0
0193:  BTFSC  25.7
0194:  BSF    25.1
0195:  GOTO   19E
0196:  BTFSS  03.2
0197:  BSF    25.0
0198:  BTFSS  03.2
0199:  GOTO   19E
019A:  MOVF   27,W
019B:  MOVWF  28
019C:  MOVLW  20
019D:  MOVWF  27
019E:  BTFSC  25.2
019F:  GOTO   1A5
01A0:  BTFSC  25.1
01A1:  GOTO   1A8
01A2:  BTFSC  25.0
01A3:  GOTO   1AB
01A4:  GOTO   1AE
01A5:  MOVF   26,W
01A6:  MOVWF  2A
01A7:  CALL   0C4
01A8:  MOVF   27,W
01A9:  MOVWF  2A
01AA:  CALL   0C4
01AB:  MOVF   28,W
01AC:  MOVWF  2A
01AD:  CALL   0C4
01AE:  MOVF   29,W
01AF:  MOVWF  2A
01B0:  CALL   0C4
01B1:  RETURN
.................... 
.................... #list
.................... 
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD
.................... #use delay(clock = 4000000)
*
000D:  MOVLW  2B
000E:  MOVWF  04
000F:  BCF    03.7
0010:  MOVF   00,W
0011:  BTFSC  03.2
0012:  GOTO   021
0013:  MOVLW  01
0014:  MOVWF  78
0015:  CLRF   77
0016:  DECFSZ 77,F
0017:  GOTO   016
0018:  DECFSZ 78,F
0019:  GOTO   015
001A:  MOVLW  4A
001B:  MOVWF  77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  GOTO   01F
001F:  DECFSZ 00,F
0020:  GOTO   013
0021:  RETURN
.................... #use fast_io(b)
.................... #define use_portb_lcd TRUE
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
003A:  MOVLW  0F
003B:  BSF    03.5
003C:  ANDWF  06,W
003D:  IORLW  F0
003E:  MOVWF  06
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
003F:  BCF    03.5
0040:  BSF    06.2
....................    delay_cycles(1);
0041:  NOP
....................    lcd_output_enable(1);
0042:  BSF    06.0
....................    delay_cycles(1);
0043:  NOP
....................    high = lcd_read_nibble();
0044:  CALL   02E
0045:  MOVF   78,W
0046:  MOVWF  32
....................       
....................    lcd_output_enable(0);
0047:  BCF    06.0
....................    delay_cycles(1);
0048:  NOP
....................    lcd_output_enable(1);
0049:  BSF    06.0
....................    delay_us(1);
004A:  NOP
....................    low = lcd_read_nibble();
004B:  CALL   02E
004C:  MOVF   78,W
004D:  MOVWF  31
....................       
....................    lcd_output_enable(0);
004E:  BCF    06.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
004F:  MOVLW  0F
0050:  BSF    03.5
0051:  ANDWF  06,W
0052:  MOVWF  06
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0053:  BCF    03.5
0054:  SWAPF  32,W
0055:  MOVWF  77
0056:  MOVLW  F0
0057:  ANDWF  77,F
0058:  MOVF   77,W
0059:  IORWF  31,W
005A:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
002E:  MOVF   06,W
002F:  MOVWF  77
0030:  SWAPF  06,W
0031:  ANDLW  0F
0032:  MOVWF  78
....................   #endif
0033:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0022:  SWAPF  32,W
0023:  ANDLW  F0
0024:  MOVWF  77
0025:  MOVLW  0F
0026:  ANDWF  06,W
0027:  IORWF  77,W
0028:  MOVWF  06
....................   #endif
....................       
....................    delay_cycles(1);
0029:  NOP
....................    lcd_output_enable(1);
002A:  BSF    06.0
....................    delay_us(2);
002B:  GOTO   02C
....................    lcd_output_enable(0);
002C:  BCF    06.0
002D:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0034:  BSF    03.5
0035:  BCF    06.0
....................    lcd_rs_tris();
0036:  BCF    06.1
....................    lcd_rw_tris();
0037:  BCF    06.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0038:  BCF    03.5
0039:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
005B:  MOVF   78,W
005C:  MOVWF  31
005D:  BTFSC  31.7
005E:  GOTO   03A
....................    lcd_output_rs(address);
005F:  BTFSS  2F.0
0060:  BCF    06.1
0061:  BTFSC  2F.0
0062:  BSF    06.1
....................    delay_cycles(1);
0063:  NOP
....................    lcd_output_rw(0);
0064:  BCF    06.2
....................    delay_cycles(1);
0065:  NOP
....................    lcd_output_enable(0);
0066:  BCF    06.0
....................    lcd_send_nibble(n >> 4);
0067:  SWAPF  30,W
0068:  MOVWF  31
0069:  MOVLW  0F
006A:  ANDWF  31,F
006B:  MOVF   31,W
006C:  MOVWF  32
006D:  CALL   022
....................    lcd_send_nibble(n & 0xf);
006E:  MOVF   30,W
006F:  ANDLW  0F
0070:  MOVWF  31
0071:  MOVWF  32
0072:  CALL   022
0073:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0074:  MOVLW  28
0075:  MOVWF  25
0076:  MOVLW  0C
0077:  MOVWF  26
0078:  MOVLW  01
0079:  MOVWF  27
007A:  MOVLW  06
007B:  MOVWF  28
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
007C:  BCF    06.0
....................    lcd_output_rs(0);
007D:  BCF    06.1
....................    lcd_output_rw(0);
007E:  BCF    06.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
007F:  MOVLW  0F
0080:  BSF    03.5
0081:  ANDWF  06,W
0082:  MOVWF  06
....................   #endif
....................    lcd_enable_tris();
0083:  BCF    06.0
....................    lcd_rs_tris();
0084:  BCF    06.1
....................    lcd_rw_tris();
0085:  BCF    06.2
....................  #endif
....................     
....................    delay_ms(15);
0086:  MOVLW  0F
0087:  BCF    03.5
0088:  MOVWF  2B
0089:  CALL   00D
....................    for(i=1;i<=3;++i)
008A:  MOVLW  01
008B:  MOVWF  24
008C:  MOVF   24,W
008D:  SUBLW  03
008E:  BTFSS  03.0
008F:  GOTO   098
....................    {
....................        lcd_send_nibble(3);
0090:  MOVLW  03
0091:  MOVWF  32
0092:  CALL   022
....................        delay_ms(5);
0093:  MOVLW  05
0094:  MOVWF  2B
0095:  CALL   00D
0096:  INCF   24,F
0097:  GOTO   08C
....................    }
....................    
....................    lcd_send_nibble(2);
0098:  MOVLW  02
0099:  MOVWF  32
009A:  CALL   022
....................    delay_ms(5);
009B:  MOVLW  05
009C:  MOVWF  2B
009D:  CALL   00D
....................    for(i=0;i<=3;++i)
009E:  CLRF   24
009F:  MOVF   24,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AF
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00A3:  MOVLW  25
00A4:  ADDWF  24,W
00A5:  MOVWF  04
00A6:  BCF    03.7
00A7:  MOVF   00,W
00A8:  MOVWF  29
00A9:  CLRF   2F
00AA:  MOVF   29,W
00AB:  MOVWF  30
00AC:  CALL   034
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00AD:  INCF   24,F
00AE:  GOTO   09F
00AF:  BCF    0A.3
00B0:  BCF    0A.4
00B1:  GOTO   1EB (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00B2:  DECFSZ 2C,W
00B3:  GOTO   0B5
00B4:  GOTO   0B8
....................       address=LCD_LINE_TWO;
00B5:  MOVLW  40
00B6:  MOVWF  2D
00B7:  GOTO   0B9
....................    else
....................       address=0;
00B8:  CLRF   2D
....................      
....................    address+=x-1;
00B9:  MOVLW  01
00BA:  SUBWF  2B,W
00BB:  ADDWF  2D,F
....................    lcd_send_byte(0,0x80|address);
00BC:  MOVF   2D,W
00BD:  IORLW  80
00BE:  MOVWF  2E
00BF:  CLRF   2F
00C0:  MOVF   2E,W
00C1:  MOVWF  30
00C2:  CALL   034
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C3:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00C4:  MOVF   2A,W
00C5:  XORLW  07
00C6:  BTFSC  03.2
00C7:  GOTO   0D2
00C8:  XORLW  0B
00C9:  BTFSC  03.2
00CA:  GOTO   0D7
00CB:  XORLW  06
00CC:  BTFSC  03.2
00CD:  GOTO   0DF
00CE:  XORLW  02
00CF:  BTFSC  03.2
00D0:  GOTO   0E5
00D1:  GOTO   0EA
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00D2:  MOVLW  01
00D3:  MOVWF  2B
00D4:  MOVWF  2C
00D5:  CALL   0B2
00D6:  GOTO   0EF
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00D7:  CLRF   2F
00D8:  MOVLW  01
00D9:  MOVWF  30
00DA:  CALL   034
....................                      delay_ms(2);
00DB:  MOVLW  02
00DC:  MOVWF  2B
00DD:  CALL   00D
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00DE:  GOTO   0EF
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00DF:  MOVLW  01
00E0:  MOVWF  2B
00E1:  MOVLW  02
00E2:  MOVWF  2C
00E3:  CALL   0B2
00E4:  GOTO   0EF
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00E5:  CLRF   2F
00E6:  MOVLW  10
00E7:  MOVWF  30
00E8:  CALL   034
00E9:  GOTO   0EF
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00EA:  MOVLW  01
00EB:  MOVWF  2F
00EC:  MOVF   2A,W
00ED:  MOVWF  30
00EE:  CALL   034
....................      #endif
....................    }
00EF:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... void main()
*
01B2:  MOVF   03,W
01B3:  ANDLW  1F
01B4:  MOVWF  03
01B5:  MOVLW  FF
01B6:  MOVWF  20
01B7:  CLRF   22
01B8:  CLRF   21
01B9:  BSF    03.5
01BA:  BSF    1F.0
01BB:  BSF    1F.1
01BC:  BSF    1F.2
01BD:  BCF    1F.3
01BE:  BCF    03.7
.................... {
....................     setup_psp(PSP_DISABLED);          // PSP devre disi
01BF:  BCF    09.4
....................     setup_spi(SPI_SS_DISABLED);       // SPI devre disi
01C0:  BCF    03.5
01C1:  BCF    14.5
01C2:  BCF    20.5
01C3:  MOVF   20,W
01C4:  BSF    03.5
01C5:  MOVWF  07
01C6:  BCF    03.5
01C7:  BSF    20.4
01C8:  MOVF   20,W
01C9:  BSF    03.5
01CA:  MOVWF  07
01CB:  BCF    03.5
01CC:  BCF    20.3
01CD:  MOVF   20,W
01CE:  BSF    03.5
01CF:  MOVWF  07
01D0:  MOVLW  01
01D1:  BCF    03.5
01D2:  MOVWF  14
01D3:  MOVLW  00
01D4:  BSF    03.5
01D5:  MOVWF  14
....................     setup_timer_1(T1_DISABLED);       // T1 devre disi
01D6:  BCF    03.5
01D7:  CLRF   10
....................     setup_timer_2(T2_DISABLED, 0, 1); // T1 devre disi
01D8:  MOVWF  78
01D9:  MOVWF  12
01DA:  MOVLW  00
01DB:  BSF    03.5
01DC:  MOVWF  12
....................     setup_adc_ports(NO_ANALOGS);      // analog giris yok
01DD:  BSF    1F.0
01DE:  BSF    1F.1
01DF:  BSF    1F.2
01E0:  BCF    1F.3
....................     setup_adc(ADC_OFF);               // ADC kapali
01E1:  BCF    03.5
01E2:  BCF    1F.0
....................     setup_CCP1(CCP_OFF);              // CCP2 devredisi
01E3:  MOVLW  F0
01E4:  ANDWF  17,F
....................     setup_CCP2(CCP_OFF);              // CCP2 devredisi
01E5:  ANDWF  1D,F
.................... 
....................     set_tris_b(0x00);
01E6:  MOVLW  00
01E7:  BSF    03.5
01E8:  MOVWF  06
....................     lcd_init();
01E9:  BCF    03.5
01EA:  GOTO   074
.................... 
....................     delay_ms(500);
01EB:  MOVLW  02
01EC:  MOVWF  24
01ED:  MOVLW  FA
01EE:  MOVWF  2B
01EF:  CALL   00D
01F0:  DECFSZ 24,F
01F1:  GOTO   1ED
.................... 
....................     int sayi = 0;
01F2:  CLRF   23
....................     delay_ms(200);
01F3:  MOVLW  C8
01F4:  MOVWF  2B
01F5:  CALL   00D
.................... 
....................     lcd_gotoxy(1, 1);
01F6:  MOVLW  01
01F7:  MOVWF  2B
01F8:  MOVWF  2C
01F9:  CALL   0B2
....................     lcd_putc("Sayi:");
01FA:  MOVLW  04
01FB:  BSF    03.6
01FC:  MOVWF  0D
01FD:  MOVLW  00
01FE:  MOVWF  0F
01FF:  BCF    03.6
0200:  CALL   0F0
....................     lcd_gotoxy(1, 2);
0201:  MOVLW  01
0202:  MOVWF  2B
0203:  MOVLW  02
0204:  MOVWF  2C
0205:  CALL   0B2
....................     printf(lcd_putc, "%d", sayi);
0206:  MOVF   23,W
0207:  MOVWF  24
0208:  MOVLW  18
0209:  MOVWF  25
020A:  CALL   15B
.................... 
....................     while (1)
....................     {
....................         if (input(pin_a0) == 1)
020B:  BSF    03.5
020C:  BSF    05.0
020D:  BCF    03.5
020E:  BTFSS  05.0
020F:  GOTO   22D
....................         {
....................             delay_ms(500);
0210:  MOVLW  02
0211:  MOVWF  24
0212:  MOVLW  FA
0213:  MOVWF  2B
0214:  CALL   00D
0215:  DECFSZ 24,F
0216:  GOTO   212
....................             sayi++;
0217:  INCF   23,F
....................             lcd_gotoxy(1, 1);
0218:  MOVLW  01
0219:  MOVWF  2B
021A:  MOVWF  2C
021B:  CALL   0B2
....................             lcd_putc("Sayi:");
021C:  MOVLW  07
021D:  BSF    03.6
021E:  MOVWF  0D
021F:  MOVLW  00
0220:  MOVWF  0F
0221:  BCF    03.6
0222:  CALL   0F0
....................             lcd_gotoxy(1, 2);
0223:  MOVLW  01
0224:  MOVWF  2B
0225:  MOVLW  02
0226:  MOVWF  2C
0227:  CALL   0B2
....................             printf(lcd_putc, "%d", sayi);
0228:  MOVF   23,W
0229:  MOVWF  24
022A:  MOVLW  18
022B:  MOVWF  25
022C:  CALL   15B
....................         }
....................         if (input(pin_a1) == 1)
022D:  BSF    03.5
022E:  BSF    05.1
022F:  BCF    03.5
0230:  BTFSS  05.1
0231:  GOTO   24F
....................         {
....................             delay_ms(500);
0232:  MOVLW  02
0233:  MOVWF  24
0234:  MOVLW  FA
0235:  MOVWF  2B
0236:  CALL   00D
0237:  DECFSZ 24,F
0238:  GOTO   234
....................             sayi--;
0239:  DECF   23,F
....................             lcd_gotoxy(1, 1);
023A:  MOVLW  01
023B:  MOVWF  2B
023C:  MOVWF  2C
023D:  CALL   0B2
....................             lcd_putc("Sayi:");
023E:  MOVLW  0A
023F:  BSF    03.6
0240:  MOVWF  0D
0241:  MOVLW  00
0242:  MOVWF  0F
0243:  BCF    03.6
0244:  CALL   0F0
....................             lcd_gotoxy(1, 2);
0245:  MOVLW  01
0246:  MOVWF  2B
0247:  MOVLW  02
0248:  MOVWF  2C
0249:  CALL   0B2
....................             printf(lcd_putc, "%d", sayi);
024A:  MOVF   23,W
024B:  MOVWF  24
024C:  MOVLW  18
024D:  MOVWF  25
024E:  CALL   15B
....................         }
024F:  GOTO   20B
....................     }
.................... }
0250:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
