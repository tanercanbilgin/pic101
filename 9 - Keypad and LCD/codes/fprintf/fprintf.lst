CCS PCM C Compiler, Version 5.112, 5967               25-Ara-23 21:27

               Filename:   C:\Users\Administrator\Desktop\notes\3_Sinif\1_Donem\Mikroislemciler\lab\lab 9\ccs\fprintf\fprintf.lst

               ROM used:   1090 words (13%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           39 (11%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3B1
0003:  NOP
.................... #include <16f877.h>
.................... //////////// Standard Header file for the PIC16F877 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877
0004:  DATA 0C,00
0005:  DATA E4,18
0006:  DATA A0,1E
0007:  DATA A0,12
0008:  DATA 64,00
0009:  DATA 64,19
000A:  DATA A0,1E
000B:  DATA A0,12
000C:  DATA 66,00
*
00F0:  MOVF   0B,W
00F1:  MOVWF  28
00F2:  BCF    0B.7
00F3:  BSF    03.5
00F4:  BSF    03.6
00F5:  BSF    0C.7
00F6:  BSF    0C.0
00F7:  NOP
00F8:  NOP
00F9:  BCF    03.5
00FA:  BCF    03.6
00FB:  BTFSC  28.7
00FC:  BSF    0B.7
00FD:  BSF    03.6
00FE:  MOVF   0C,W
00FF:  ANDLW  7F
0100:  BTFSC  03.2
0101:  GOTO   144
0102:  BCF    03.6
0103:  MOVWF  28
0104:  BSF    03.6
0105:  MOVF   0D,W
0106:  BCF    03.6
0107:  MOVWF  29
0108:  BSF    03.6
0109:  MOVF   0F,W
010A:  BCF    03.6
010B:  MOVWF  2A
010C:  MOVF   28,W
010D:  MOVWF  35
010E:  CALL   0C4
010F:  MOVF   29,W
0110:  BSF    03.6
0111:  MOVWF  0D
0112:  BCF    03.6
0113:  MOVF   2A,W
0114:  BSF    03.6
0115:  MOVWF  0F
0116:  BCF    03.6
0117:  MOVF   0B,W
0118:  MOVWF  2B
0119:  BCF    0B.7
011A:  BSF    03.5
011B:  BSF    03.6
011C:  BSF    0C.7
011D:  BSF    0C.0
011E:  NOP
011F:  NOP
0120:  BCF    03.5
0121:  BCF    03.6
0122:  BTFSC  2B.7
0123:  BSF    0B.7
0124:  BSF    03.6
0125:  RLF    0C,W
0126:  RLF    0E,W
0127:  ANDLW  7F
0128:  BTFSC  03.2
0129:  GOTO   144
012A:  BCF    03.6
012B:  MOVWF  28
012C:  BSF    03.6
012D:  MOVF   0D,W
012E:  BCF    03.6
012F:  MOVWF  29
0130:  BSF    03.6
0131:  MOVF   0F,W
0132:  BCF    03.6
0133:  MOVWF  2A
0134:  MOVF   28,W
0135:  MOVWF  35
0136:  CALL   0C4
0137:  MOVF   29,W
0138:  BSF    03.6
0139:  MOVWF  0D
013A:  BCF    03.6
013B:  MOVF   2A,W
013C:  BSF    03.6
013D:  MOVWF  0F
013E:  INCF   0D,F
013F:  BTFSC  03.2
0140:  INCF   0F,F
0141:  BCF    03.6
0142:  GOTO   0F0
0143:  BSF    03.6
0144:  BCF    03.6
0145:  BCF    0A.3
0146:  BCF    0A.4
0147:  GOTO   40A (RETURN)
0148:  MOVF   0B,W
0149:  MOVWF  29
014A:  BCF    0B.7
014B:  BSF    03.5
014C:  BSF    03.6
014D:  BSF    0C.7
014E:  BSF    0C.0
014F:  NOP
0150:  NOP
0151:  BCF    03.5
0152:  BCF    03.6
0153:  BTFSC  29.7
0154:  BSF    0B.7
0155:  BTFSC  03.0
0156:  GOTO   17F
0157:  BSF    03.6
0158:  MOVF   0C,W
0159:  ANDLW  7F
015A:  BCF    03.6
015B:  MOVWF  29
015C:  BSF    03.6
015D:  MOVF   0D,W
015E:  BCF    03.6
015F:  MOVWF  2A
0160:  BSF    03.6
0161:  MOVF   0F,W
0162:  BCF    03.6
0163:  MOVWF  2B
0164:  MOVF   29,W
0165:  MOVWF  35
0166:  CALL   0C4
0167:  MOVF   2A,W
0168:  BSF    03.6
0169:  MOVWF  0D
016A:  BCF    03.6
016B:  MOVF   2B,W
016C:  BSF    03.6
016D:  MOVWF  0F
016E:  BCF    03.6
016F:  MOVF   0B,W
0170:  MOVWF  2C
0171:  BCF    0B.7
0172:  BSF    03.5
0173:  BSF    03.6
0174:  BSF    0C.7
0175:  BSF    0C.0
0176:  NOP
0177:  NOP
0178:  BCF    03.5
0179:  BCF    03.6
017A:  BTFSC  2C.7
017B:  BSF    0B.7
017C:  DECFSZ 28,F
017D:  GOTO   17F
017E:  GOTO   19E
017F:  BSF    03.6
0180:  RLF    0C,W
0181:  RLF    0E,W
0182:  ANDLW  7F
0183:  BCF    03.6
0184:  MOVWF  29
0185:  BSF    03.6
0186:  MOVF   0D,W
0187:  BCF    03.6
0188:  MOVWF  2A
0189:  BSF    03.6
018A:  MOVF   0F,W
018B:  BCF    03.6
018C:  MOVWF  2B
018D:  MOVF   29,W
018E:  MOVWF  35
018F:  CALL   0C4
0190:  MOVF   2A,W
0191:  BSF    03.6
0192:  MOVWF  0D
0193:  BCF    03.6
0194:  MOVF   2B,W
0195:  BSF    03.6
0196:  MOVWF  0F
0197:  INCF   0D,F
0198:  BTFSC  03.2
0199:  INCF   0F,F
019A:  BCF    03.0
019B:  BCF    03.6
019C:  DECFSZ 28,F
019D:  GOTO   148
019E:  RETURN
019F:  MOVF   2F,W
01A0:  CLRF   78
01A1:  SUBWF  2E,W
01A2:  BTFSC  03.0
01A3:  GOTO   1A7
01A4:  MOVF   2E,W
01A5:  MOVWF  77
01A6:  GOTO   1B3
01A7:  CLRF   77
01A8:  MOVLW  08
01A9:  MOVWF  30
01AA:  RLF    2E,F
01AB:  RLF    77,F
01AC:  MOVF   2F,W
01AD:  SUBWF  77,W
01AE:  BTFSC  03.0
01AF:  MOVWF  77
01B0:  RLF    78,F
01B1:  DECFSZ 30,F
01B2:  GOTO   1AA
01B3:  RETURN
01B4:  MOVLW  20
01B5:  BTFSS  29.4
01B6:  MOVLW  30
01B7:  MOVWF  2A
01B8:  MOVF   28,W
01B9:  MOVWF  77
01BA:  BTFSS  28.7
01BB:  GOTO   1C4
01BC:  COMF   77,F
01BD:  INCF   77,F
01BE:  MOVF   77,W
01BF:  MOVWF  28
01C0:  MOVLW  2D
01C1:  MOVWF  2A
01C2:  BSF    29.7
01C3:  BSF    29.0
01C4:  MOVF   28,W
01C5:  MOVWF  2E
01C6:  MOVLW  64
01C7:  MOVWF  2F
01C8:  CALL   19F
01C9:  MOVF   77,W
01CA:  MOVWF  28
01CB:  MOVLW  30
01CC:  ADDWF  78,W
01CD:  MOVWF  2B
01CE:  MOVF   28,W
01CF:  MOVWF  2E
01D0:  MOVLW  0A
01D1:  MOVWF  2F
01D2:  CALL   19F
01D3:  MOVLW  30
01D4:  ADDWF  77,W
01D5:  MOVWF  2D
01D6:  MOVLW  30
01D7:  ADDWF  78,W
01D8:  MOVWF  2C
01D9:  MOVF   2A,W
01DA:  MOVWF  77
01DB:  MOVLW  30
01DC:  SUBWF  2B,W
01DD:  BTFSC  03.2
01DE:  GOTO   1E3
01DF:  BSF    29.1
01E0:  BTFSC  29.7
01E1:  BSF    29.2
01E2:  GOTO   1F7
01E3:  MOVF   2A,W
01E4:  MOVWF  2B
01E5:  MOVLW  20
01E6:  MOVWF  2A
01E7:  MOVLW  30
01E8:  SUBWF  2C,W
01E9:  BTFSC  03.2
01EA:  GOTO   1EF
01EB:  BSF    29.0
01EC:  BTFSC  29.7
01ED:  BSF    29.1
01EE:  GOTO   1F7
01EF:  BTFSS  03.2
01F0:  BSF    29.0
01F1:  BTFSS  03.2
01F2:  GOTO   1F7
01F3:  MOVF   2B,W
01F4:  MOVWF  2C
01F5:  MOVLW  20
01F6:  MOVWF  2B
01F7:  BTFSC  29.2
01F8:  GOTO   1FE
01F9:  BTFSC  29.1
01FA:  GOTO   201
01FB:  BTFSC  29.0
01FC:  GOTO   204
01FD:  GOTO   207
01FE:  MOVF   2A,W
01FF:  MOVWF  35
0200:  CALL   0C4
0201:  MOVF   2B,W
0202:  MOVWF  35
0203:  CALL   0C4
0204:  MOVF   2C,W
0205:  MOVWF  35
0206:  CALL   0C4
0207:  MOVF   2D,W
0208:  MOVWF  35
0209:  CALL   0C4
020A:  BCF    0A.3
020B:  BCF    0A.4
020C:  GOTO   41D (RETURN)
020D:  BTFSC  03.1
020E:  GOTO   212
020F:  MOVLW  3D
0210:  MOVWF  04
0211:  BCF    03.7
0212:  CLRF   77
0213:  CLRF   78
0214:  CLRF   79
0215:  CLRF   7A
0216:  CLRF   3D
0217:  CLRF   3E
0218:  CLRF   3F
0219:  CLRF   40
021A:  MOVF   3C,W
021B:  IORWF  3B,W
021C:  IORWF  3A,W
021D:  IORWF  39,W
021E:  BTFSC  03.2
021F:  GOTO   250
0220:  MOVLW  20
0221:  MOVWF  41
0222:  BCF    03.0
0223:  RLF    35,F
0224:  RLF    36,F
0225:  RLF    37,F
0226:  RLF    38,F
0227:  RLF    3D,F
0228:  RLF    3E,F
0229:  RLF    3F,F
022A:  RLF    40,F
022B:  MOVF   3C,W
022C:  SUBWF  40,W
022D:  BTFSS  03.2
022E:  GOTO   239
022F:  MOVF   3B,W
0230:  SUBWF  3F,W
0231:  BTFSS  03.2
0232:  GOTO   239
0233:  MOVF   3A,W
0234:  SUBWF  3E,W
0235:  BTFSS  03.2
0236:  GOTO   239
0237:  MOVF   39,W
0238:  SUBWF  3D,W
0239:  BTFSS  03.0
023A:  GOTO   24A
023B:  MOVF   39,W
023C:  SUBWF  3D,F
023D:  MOVF   3A,W
023E:  BTFSS  03.0
023F:  INCFSZ 3A,W
0240:  SUBWF  3E,F
0241:  MOVF   3B,W
0242:  BTFSS  03.0
0243:  INCFSZ 3B,W
0244:  SUBWF  3F,F
0245:  MOVF   3C,W
0246:  BTFSS  03.0
0247:  INCFSZ 3C,W
0248:  SUBWF  40,F
0249:  BSF    03.0
024A:  RLF    77,F
024B:  RLF    78,F
024C:  RLF    79,F
024D:  RLF    7A,F
024E:  DECFSZ 41,F
024F:  GOTO   222
0250:  MOVF   3D,W
0251:  MOVWF  00
0252:  INCF   04,F
0253:  MOVF   3E,W
0254:  MOVWF  00
0255:  INCF   04,F
0256:  MOVF   3F,W
0257:  MOVWF  00
0258:  INCF   04,F
0259:  MOVF   40,W
025A:  MOVWF  00
025B:  RETURN
025C:  MOVF   04,W
025D:  MOVWF  2D
025E:  MOVF   2C,W
025F:  MOVWF  2F
0260:  BTFSC  03.2
0261:  GOTO   2EE
0262:  MOVF   2B,W
0263:  MOVWF  38
0264:  MOVF   2A,W
0265:  MOVWF  37
0266:  MOVF   29,W
0267:  MOVWF  36
0268:  MOVF   28,W
0269:  MOVWF  35
026A:  CLRF   3C
026B:  CLRF   3B
026C:  MOVLW  20
026D:  MOVWF  3A
026E:  MOVLW  82
026F:  MOVWF  39
0270:  MOVF   35,W
0271:  BTFSC  03.2
0272:  GOTO   2E0
0273:  MOVWF  3D
0274:  MOVF   39,W
0275:  BTFSC  03.2
0276:  GOTO   2E0
0277:  ADDWF  3D,F
0278:  BTFSC  03.0
0279:  GOTO   281
027A:  MOVLW  7F
027B:  SUBWF  3D,F
027C:  BTFSS  03.0
027D:  GOTO   2E0
027E:  BTFSC  03.2
027F:  GOTO   2E0
0280:  GOTO   285
0281:  MOVLW  81
0282:  ADDWF  3D,F
0283:  BTFSC  03.0
0284:  GOTO   2E0
0285:  MOVF   3D,W
0286:  MOVWF  77
0287:  CLRF   78
0288:  CLRF   79
0289:  CLRF   7A
028A:  MOVF   36,W
028B:  MOVWF  41
028C:  BSF    41.7
028D:  MOVF   37,W
028E:  MOVWF  40
028F:  MOVF   38,W
0290:  MOVWF  3F
0291:  MOVLW  18
0292:  MOVWF  3D
0293:  CLRF   3E
0294:  BTFSS  3F.0
0295:  GOTO   2AE
0296:  MOVF   3C,W
0297:  ADDWF  7A,F
0298:  BTFSS  03.0
0299:  GOTO   2A0
029A:  INCF   79,F
029B:  BTFSS  03.2
029C:  GOTO   2A0
029D:  INCF   78,F
029E:  BTFSC  03.2
029F:  BSF    3E.7
02A0:  MOVF   3B,W
02A1:  ADDWF  79,F
02A2:  BTFSS  03.0
02A3:  GOTO   2A7
02A4:  INCF   78,F
02A5:  BTFSC  03.2
02A6:  BSF    3E.7
02A7:  MOVF   3A,W
02A8:  MOVWF  37
02A9:  BSF    37.7
02AA:  MOVF   37,W
02AB:  ADDWF  78,F
02AC:  BTFSC  03.0
02AD:  BSF    3E.7
02AE:  RLF    3E,F
02AF:  RRF    78,F
02B0:  RRF    79,F
02B1:  RRF    7A,F
02B2:  RRF    41,F
02B3:  RRF    40,F
02B4:  RRF    3F,F
02B5:  BCF    03.0
02B6:  DECFSZ 3D,F
02B7:  GOTO   293
02B8:  MOVLW  01
02B9:  ADDWF  77,F
02BA:  BTFSC  03.0
02BB:  GOTO   2E0
02BC:  BTFSC  78.7
02BD:  GOTO   2C5
02BE:  RLF    41,F
02BF:  RLF    7A,F
02C0:  RLF    79,F
02C1:  RLF    78,F
02C2:  DECF   77,F
02C3:  BTFSC  03.2
02C4:  GOTO   2E0
02C5:  BTFSS  41.7
02C6:  GOTO   2D6
02C7:  INCF   7A,F
02C8:  BTFSS  03.2
02C9:  GOTO   2D6
02CA:  INCF   79,F
02CB:  BTFSS  03.2
02CC:  GOTO   2D6
02CD:  INCF   78,F
02CE:  BTFSS  03.2
02CF:  GOTO   2D6
02D0:  RRF    78,F
02D1:  RRF    79,F
02D2:  RRF    7A,F
02D3:  INCF   77,F
02D4:  BTFSC  03.2
02D5:  GOTO   2E0
02D6:  MOVF   36,W
02D7:  MOVWF  3E
02D8:  MOVF   3A,W
02D9:  XORWF  3E,F
02DA:  BTFSS  3E.7
02DB:  GOTO   2DE
02DC:  BSF    78.7
02DD:  GOTO   2E4
02DE:  BCF    78.7
02DF:  GOTO   2E4
02E0:  CLRF   77
02E1:  CLRF   78
02E2:  CLRF   79
02E3:  CLRF   7A
02E4:  MOVF   7A,W
02E5:  MOVWF  2B
02E6:  MOVF   79,W
02E7:  MOVWF  2A
02E8:  MOVF   78,W
02E9:  MOVWF  29
02EA:  MOVF   77,W
02EB:  MOVWF  28
02EC:  DECFSZ 2F,F
02ED:  GOTO   262
02EE:  MOVF   2B,W
02EF:  MOVWF  38
02F0:  MOVF   2A,W
02F1:  MOVWF  37
02F2:  MOVF   29,W
02F3:  MOVWF  36
02F4:  MOVF   28,W
02F5:  MOVWF  35
02F6:  MOVF   35,W
02F7:  SUBLW  B6
02F8:  MOVWF  35
02F9:  CLRF   7A
02FA:  MOVF   36,W
02FB:  MOVWF  39
02FC:  BSF    36.7
02FD:  BCF    03.0
02FE:  RRF    36,F
02FF:  RRF    37,F
0300:  RRF    38,F
0301:  RRF    7A,F
0302:  RRF    79,F
0303:  RRF    78,F
0304:  RRF    77,F
0305:  DECFSZ 35,F
0306:  GOTO   2FD
0307:  BTFSS  39.7
0308:  GOTO   314
0309:  COMF   77,F
030A:  COMF   78,F
030B:  COMF   79,F
030C:  COMF   7A,F
030D:  INCF   77,F
030E:  BTFSC  03.2
030F:  INCF   78,F
0310:  BTFSC  03.2
0311:  INCF   79,F
0312:  BTFSC  03.2
0313:  INCF   7A,F
0314:  MOVF   7A,W
0315:  MOVWF  2B
0316:  MOVF   79,W
0317:  MOVWF  2A
0318:  MOVF   78,W
0319:  MOVWF  29
031A:  MOVF   77,W
031B:  MOVWF  28
031C:  BTFSS  2B.7
031D:  GOTO   32B
031E:  DECF   2D,F
031F:  BSF    2D.5
0320:  COMF   28,F
0321:  COMF   29,F
0322:  COMF   2A,F
0323:  COMF   2B,F
0324:  INCF   28,F
0325:  BTFSC  03.2
0326:  INCF   29,F
0327:  BTFSC  03.2
0328:  INCF   2A,F
0329:  BTFSC  03.2
032A:  INCF   2B,F
032B:  MOVLW  3B
032C:  MOVWF  34
032D:  MOVLW  9A
032E:  MOVWF  33
032F:  MOVLW  CA
0330:  MOVWF  32
0331:  CLRF   31
0332:  MOVLW  0A
0333:  MOVWF  2F
0334:  MOVF   2C,W
0335:  BTFSC  03.2
0336:  INCF   2D,F
0337:  BSF    03.1
0338:  MOVLW  28
0339:  MOVWF  04
033A:  BCF    03.7
033B:  MOVF   2B,W
033C:  MOVWF  38
033D:  MOVF   2A,W
033E:  MOVWF  37
033F:  MOVF   29,W
0340:  MOVWF  36
0341:  MOVF   28,W
0342:  MOVWF  35
0343:  MOVF   34,W
0344:  MOVWF  3C
0345:  MOVF   33,W
0346:  MOVWF  3B
0347:  MOVF   32,W
0348:  MOVWF  3A
0349:  MOVF   31,W
034A:  MOVWF  39
034B:  CALL   20D
034C:  MOVF   78,W
034D:  MOVF   77,F
034E:  BTFSS  03.2
034F:  GOTO   363
0350:  INCF   2C,W
0351:  SUBWF  2F,W
0352:  BTFSC  03.2
0353:  GOTO   363
0354:  MOVF   2D,W
0355:  BTFSC  03.2
0356:  GOTO   365
0357:  ANDLW  0F
0358:  SUBWF  2F,W
0359:  BTFSC  03.2
035A:  GOTO   35D
035B:  BTFSC  03.0
035C:  GOTO   395
035D:  BTFSC  2D.7
035E:  GOTO   395
035F:  BTFSC  2D.6
0360:  GOTO   365
0361:  MOVLW  20
0362:  GOTO   391
0363:  MOVLW  20
0364:  ANDWF  2D,F
0365:  BTFSS  2D.5
0366:  GOTO   373
0367:  BCF    2D.5
0368:  MOVF   2C,W
0369:  BTFSS  03.2
036A:  DECF   2D,F
036B:  MOVF   77,W
036C:  MOVWF  2D
036D:  MOVLW  2D
036E:  MOVWF  35
036F:  CALL   0C4
0370:  MOVF   2D,W
0371:  MOVWF  77
0372:  CLRF   2D
0373:  MOVF   2C,W
0374:  SUBWF  2F,W
0375:  BTFSS  03.2
0376:  GOTO   381
0377:  MOVF   77,W
0378:  MOVWF  2D
0379:  MOVLW  2E
037A:  MOVWF  35
037B:  CALL   0C4
037C:  MOVF   2D,W
037D:  MOVWF  77
037E:  MOVLW  20
037F:  ANDWF  2D,F
0380:  MOVLW  00
0381:  MOVLW  30
0382:  BTFSS  2D.5
0383:  GOTO   391
0384:  BCF    2D.5
0385:  MOVF   2C,W
0386:  BTFSS  03.2
0387:  DECF   2D,F
0388:  MOVF   77,W
0389:  MOVWF  2D
038A:  MOVLW  2D
038B:  MOVWF  35
038C:  CALL   0C4
038D:  MOVF   2D,W
038E:  MOVWF  77
038F:  CLRF   2D
0390:  MOVLW  30
0391:  ADDWF  77,F
0392:  MOVF   77,W
0393:  MOVWF  35
0394:  CALL   0C4
0395:  BCF    03.1
0396:  MOVF   34,W
0397:  MOVWF  38
0398:  MOVF   33,W
0399:  MOVWF  37
039A:  MOVF   32,W
039B:  MOVWF  36
039C:  MOVF   31,W
039D:  MOVWF  35
039E:  CLRF   3C
039F:  CLRF   3B
03A0:  CLRF   3A
03A1:  MOVLW  0A
03A2:  MOVWF  39
03A3:  CALL   20D
03A4:  MOVF   7A,W
03A5:  MOVWF  34
03A6:  MOVF   79,W
03A7:  MOVWF  33
03A8:  MOVF   78,W
03A9:  MOVWF  32
03AA:  MOVF   77,W
03AB:  MOVWF  31
03AC:  DECFSZ 2F,F
03AD:  GOTO   337
03AE:  BCF    0A.3
03AF:  BCF    0A.4
03B0:  GOTO   439 (RETURN)
.................... 
.................... #list
.................... 
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD
.................... #use delay(clock = 4000000)
*
000D:  MOVLW  36
000E:  MOVWF  04
000F:  BCF    03.7
0010:  MOVF   00,W
0011:  BTFSC  03.2
0012:  GOTO   021
0013:  MOVLW  01
0014:  MOVWF  78
0015:  CLRF   77
0016:  DECFSZ 77,F
0017:  GOTO   016
0018:  DECFSZ 78,F
0019:  GOTO   015
001A:  MOVLW  4A
001B:  MOVWF  77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  GOTO   01F
001F:  DECFSZ 00,F
0020:  GOTO   013
0021:  RETURN
.................... #use fast_io(b)
.................... #define use_portb_lcd TRUE
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
003A:  MOVLW  0F
003B:  BSF    03.5
003C:  ANDWF  06,W
003D:  IORLW  F0
003E:  MOVWF  06
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
003F:  BCF    03.5
0040:  BSF    06.2
....................    delay_cycles(1);
0041:  NOP
....................    lcd_output_enable(1);
0042:  BSF    06.0
....................    delay_cycles(1);
0043:  NOP
....................    high = lcd_read_nibble();
0044:  CALL   02E
0045:  MOVF   78,W
0046:  MOVWF  3D
....................       
....................    lcd_output_enable(0);
0047:  BCF    06.0
....................    delay_cycles(1);
0048:  NOP
....................    lcd_output_enable(1);
0049:  BSF    06.0
....................    delay_us(1);
004A:  NOP
....................    low = lcd_read_nibble();
004B:  CALL   02E
004C:  MOVF   78,W
004D:  MOVWF  3C
....................       
....................    lcd_output_enable(0);
004E:  BCF    06.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
004F:  MOVLW  0F
0050:  BSF    03.5
0051:  ANDWF  06,W
0052:  MOVWF  06
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0053:  BCF    03.5
0054:  SWAPF  3D,W
0055:  MOVWF  77
0056:  MOVLW  F0
0057:  ANDWF  77,F
0058:  MOVF   77,W
0059:  IORWF  3C,W
005A:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
002E:  MOVF   06,W
002F:  MOVWF  77
0030:  SWAPF  06,W
0031:  ANDLW  0F
0032:  MOVWF  78
....................   #endif
0033:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0022:  SWAPF  3D,W
0023:  ANDLW  F0
0024:  MOVWF  77
0025:  MOVLW  0F
0026:  ANDWF  06,W
0027:  IORWF  77,W
0028:  MOVWF  06
....................   #endif
....................       
....................    delay_cycles(1);
0029:  NOP
....................    lcd_output_enable(1);
002A:  BSF    06.0
....................    delay_us(2);
002B:  GOTO   02C
....................    lcd_output_enable(0);
002C:  BCF    06.0
002D:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0034:  BSF    03.5
0035:  BCF    06.0
....................    lcd_rs_tris();
0036:  BCF    06.1
....................    lcd_rw_tris();
0037:  BCF    06.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0038:  BCF    03.5
0039:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
005B:  MOVF   78,W
005C:  MOVWF  3C
005D:  BTFSC  3C.7
005E:  GOTO   03A
....................    lcd_output_rs(address);
005F:  BTFSS  3A.0
0060:  BCF    06.1
0061:  BTFSC  3A.0
0062:  BSF    06.1
....................    delay_cycles(1);
0063:  NOP
....................    lcd_output_rw(0);
0064:  BCF    06.2
....................    delay_cycles(1);
0065:  NOP
....................    lcd_output_enable(0);
0066:  BCF    06.0
....................    lcd_send_nibble(n >> 4);
0067:  SWAPF  3B,W
0068:  MOVWF  3C
0069:  MOVLW  0F
006A:  ANDWF  3C,F
006B:  MOVF   3C,W
006C:  MOVWF  3D
006D:  CALL   022
....................    lcd_send_nibble(n & 0xf);
006E:  MOVF   3B,W
006F:  ANDLW  0F
0070:  MOVWF  3C
0071:  MOVWF  3D
0072:  CALL   022
0073:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0074:  MOVLW  28
0075:  MOVWF  29
0076:  MOVLW  0C
0077:  MOVWF  2A
0078:  MOVLW  01
0079:  MOVWF  2B
007A:  MOVLW  06
007B:  MOVWF  2C
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
007C:  BCF    06.0
....................    lcd_output_rs(0);
007D:  BCF    06.1
....................    lcd_output_rw(0);
007E:  BCF    06.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
007F:  MOVLW  0F
0080:  BSF    03.5
0081:  ANDWF  06,W
0082:  MOVWF  06
....................   #endif
....................    lcd_enable_tris();
0083:  BCF    06.0
....................    lcd_rs_tris();
0084:  BCF    06.1
....................    lcd_rw_tris();
0085:  BCF    06.2
....................  #endif
....................     
....................    delay_ms(15);
0086:  MOVLW  0F
0087:  BCF    03.5
0088:  MOVWF  36
0089:  CALL   00D
....................    for(i=1;i<=3;++i)
008A:  MOVLW  01
008B:  MOVWF  28
008C:  MOVF   28,W
008D:  SUBLW  03
008E:  BTFSS  03.0
008F:  GOTO   098
....................    {
....................        lcd_send_nibble(3);
0090:  MOVLW  03
0091:  MOVWF  3D
0092:  CALL   022
....................        delay_ms(5);
0093:  MOVLW  05
0094:  MOVWF  36
0095:  CALL   00D
0096:  INCF   28,F
0097:  GOTO   08C
....................    }
....................    
....................    lcd_send_nibble(2);
0098:  MOVLW  02
0099:  MOVWF  3D
009A:  CALL   022
....................    delay_ms(5);
009B:  MOVLW  05
009C:  MOVWF  36
009D:  CALL   00D
....................    for(i=0;i<=3;++i)
009E:  CLRF   28
009F:  MOVF   28,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AF
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00A3:  MOVLW  29
00A4:  ADDWF  28,W
00A5:  MOVWF  04
00A6:  BCF    03.7
00A7:  MOVF   00,W
00A8:  MOVWF  2D
00A9:  CLRF   3A
00AA:  MOVF   2D,W
00AB:  MOVWF  3B
00AC:  CALL   034
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00AD:  INCF   28,F
00AE:  GOTO   09F
00AF:  BCF    0A.3
00B0:  BCF    0A.4
00B1:  GOTO   3EA (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
00B2:  DECFSZ 37,W
00B3:  GOTO   0B5
00B4:  GOTO   0B8
....................       address=LCD_LINE_TWO;
00B5:  MOVLW  40
00B6:  MOVWF  38
00B7:  GOTO   0B9
....................    else
....................       address=0;
00B8:  CLRF   38
....................      
....................    address+=x-1;
00B9:  MOVLW  01
00BA:  SUBWF  36,W
00BB:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address);
00BC:  MOVF   38,W
00BD:  IORLW  80
00BE:  MOVWF  39
00BF:  CLRF   3A
00C0:  MOVF   39,W
00C1:  MOVWF  3B
00C2:  CALL   034
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00C3:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
00C4:  MOVF   35,W
00C5:  XORLW  07
00C6:  BTFSC  03.2
00C7:  GOTO   0D2
00C8:  XORLW  0B
00C9:  BTFSC  03.2
00CA:  GOTO   0D7
00CB:  XORLW  06
00CC:  BTFSC  03.2
00CD:  GOTO   0DF
00CE:  XORLW  02
00CF:  BTFSC  03.2
00D0:  GOTO   0E5
00D1:  GOTO   0EA
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
00D2:  MOVLW  01
00D3:  MOVWF  36
00D4:  MOVWF  37
00D5:  CALL   0B2
00D6:  GOTO   0EF
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
00D7:  CLRF   3A
00D8:  MOVLW  01
00D9:  MOVWF  3B
00DA:  CALL   034
....................                      delay_ms(2);
00DB:  MOVLW  02
00DC:  MOVWF  36
00DD:  CALL   00D
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
00DE:  GOTO   0EF
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00DF:  MOVLW  01
00E0:  MOVWF  36
00E1:  MOVLW  02
00E2:  MOVWF  37
00E3:  CALL   0B2
00E4:  GOTO   0EF
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00E5:  CLRF   3A
00E6:  MOVLW  10
00E7:  MOVWF  3B
00E8:  CALL   034
00E9:  GOTO   0EF
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
00EA:  MOVLW  01
00EB:  MOVWF  3A
00EC:  MOVF   35,W
00ED:  MOVWF  3B
00EE:  CALL   034
....................      #endif
....................    }
00EF:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... void main()
*
03B1:  MOVF   03,W
03B2:  ANDLW  1F
03B3:  MOVWF  03
03B4:  MOVLW  FF
03B5:  MOVWF  20
03B6:  CLRF   22
03B7:  CLRF   21
03B8:  BSF    03.5
03B9:  BSF    1F.0
03BA:  BSF    1F.1
03BB:  BSF    1F.2
03BC:  BCF    1F.3
03BD:  BCF    03.7
.................... {
....................     setup_psp(PSP_DISABLED);          // PSP devre disi
03BE:  BCF    09.4
....................     setup_spi(SPI_SS_DISABLED);       // SPI devre disi
03BF:  BCF    03.5
03C0:  BCF    14.5
03C1:  BCF    20.5
03C2:  MOVF   20,W
03C3:  BSF    03.5
03C4:  MOVWF  07
03C5:  BCF    03.5
03C6:  BSF    20.4
03C7:  MOVF   20,W
03C8:  BSF    03.5
03C9:  MOVWF  07
03CA:  BCF    03.5
03CB:  BCF    20.3
03CC:  MOVF   20,W
03CD:  BSF    03.5
03CE:  MOVWF  07
03CF:  MOVLW  01
03D0:  BCF    03.5
03D1:  MOVWF  14
03D2:  MOVLW  00
03D3:  BSF    03.5
03D4:  MOVWF  14
....................     setup_timer_1(T1_DISABLED);       // T1 devre disi
03D5:  BCF    03.5
03D6:  CLRF   10
....................     setup_timer_2(T2_DISABLED, 0, 1); // T1 devre disi
03D7:  MOVWF  78
03D8:  MOVWF  12
03D9:  MOVLW  00
03DA:  BSF    03.5
03DB:  MOVWF  12
....................     setup_adc_ports(NO_ANALOGS);      // analog giris yok
03DC:  BSF    1F.0
03DD:  BSF    1F.1
03DE:  BSF    1F.2
03DF:  BCF    1F.3
....................     setup_adc(ADC_OFF);               // ADC kapali
03E0:  BCF    03.5
03E1:  BCF    1F.0
....................     setup_CCP1(CCP_OFF);              // CCP2 devredisi
03E2:  MOVLW  F0
03E3:  ANDWF  17,F
....................     setup_CCP2(CCP_OFF);              // CCP2 devredisi
03E4:  ANDWF  1D,F
.................... 
....................     set_tris_b(0x00);
03E5:  MOVLW  00
03E6:  BSF    03.5
03E7:  MOVWF  06
....................     lcd_init();
03E8:  BCF    03.5
03E9:  GOTO   074
.................... 
....................     delay_ms(500);
03EA:  MOVLW  02
03EB:  MOVWF  28
03EC:  MOVLW  FA
03ED:  MOVWF  36
03EE:  CALL   00D
03EF:  DECFSZ 28,F
03F0:  GOTO   3EC
.................... 
....................     lcd_gotoxy(6, 1);
03F1:  MOVLW  06
03F2:  MOVWF  36
03F3:  MOVLW  01
03F4:  MOVWF  37
03F5:  CALL   0B2
....................     delay_ms(200); // 1 sn gecikme
03F6:  MOVLW  C8
03F7:  MOVWF  36
03F8:  CALL   00D
....................     int d1 = 13;
....................     float d2 = 0.44;
03F9:  MOVLW  0D
03FA:  MOVWF  23
03FB:  MOVLW  AE
03FC:  MOVWF  27
03FD:  MOVLW  47
03FE:  MOVWF  26
03FF:  MOVLW  61
0400:  MOVWF  25
0401:  MOVLW  7D
0402:  MOVWF  24
.................... 
....................     while (1)
....................     {
....................         lcd_putc("\f");
0403:  MOVLW  04
0404:  BSF    03.6
0405:  MOVWF  0D
0406:  MOVLW  00
0407:  MOVWF  0F
0408:  BCF    03.6
0409:  GOTO   0F0
....................         lcd_gotoxy(1, 1);
040A:  MOVLW  01
040B:  MOVWF  36
040C:  MOVWF  37
040D:  CALL   0B2
....................         printf(lcd_putc, "d1 = %d", d1);
040E:  MOVLW  05
040F:  BSF    03.6
0410:  MOVWF  0D
0411:  MOVLW  00
0412:  MOVWF  0F
0413:  BCF    03.0
0414:  MOVLW  05
0415:  BCF    03.6
0416:  MOVWF  28
0417:  CALL   148
0418:  MOVF   23,W
0419:  MOVWF  28
041A:  MOVLW  18
041B:  MOVWF  29
041C:  GOTO   1B4
....................         lcd_gotoxy(1, 2);
041D:  MOVLW  01
041E:  MOVWF  36
041F:  MOVLW  02
0420:  MOVWF  37
0421:  CALL   0B2
....................         printf(lcd_putc, "d2 = %f", d2);
0422:  MOVLW  09
0423:  BSF    03.6
0424:  MOVWF  0D
0425:  MOVLW  00
0426:  MOVWF  0F
0427:  BCF    03.0
0428:  MOVLW  05
0429:  BCF    03.6
042A:  MOVWF  28
042B:  CALL   148
042C:  MOVLW  89
042D:  MOVWF  04
042E:  MOVF   27,W
042F:  MOVWF  2B
0430:  MOVF   26,W
0431:  MOVWF  2A
0432:  MOVF   25,W
0433:  MOVWF  29
0434:  MOVF   24,W
0435:  MOVWF  28
0436:  MOVLW  02
0437:  MOVWF  2C
0438:  GOTO   25C
....................         delay_ms(1000);
0439:  MOVLW  04
043A:  MOVWF  28
043B:  MOVLW  FA
043C:  MOVWF  36
043D:  CALL   00D
043E:  DECFSZ 28,F
043F:  GOTO   43B
0440:  GOTO   403
....................     }
.................... }
0441:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
